{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Router from \"next/router\";\nconst RETRY_COUNT = 5; // console.log(process.env.BASE_URL);\n\nasync function api(endpoint, method, data, optHeaders) {\n  const BASE_URL = process.env.BASE_URL;\n  const router = Router;\n  let token;\n  if (false && window.localStorage) token = await localStorage.getItem(\"token\");\n  const requestUrl = `${BASE_URL}${endpoint}`;\n  console.log(requestUrl);\n  const requestConfig = {\n    method,\n    // mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    // credentials: \"include\",\n    body: JSON.stringify(data)\n  };\n\n  if (token) {\n    // console.log(\"token: \", token);\n    requestConfig.headers = _objectSpread(_objectSpread({}, requestConfig.headers), {}, {\n      Authorization: token\n    });\n  }\n\n  try {\n    const response = await fetch(requestUrl, requestConfig);\n    const results = await response.json();\n\n    if (results.error) {\n      console.log(\"error: \", results.error);\n\n      if (results.error.code === \"invalid token\") {\n        await localStorage.removeItem(\"token\");\n        router.push(\"/login\");\n      }\n    }\n\n    return results;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport default api;","map":{"version":3,"sources":["/home/asd/Work/Learning/next-frontend/apiProvider.js"],"names":["Router","RETRY_COUNT","api","endpoint","method","data","optHeaders","BASE_URL","process","env","router","token","window","localStorage","getItem","requestUrl","console","log","requestConfig","headers","body","JSON","stringify","Authorization","response","fetch","results","json","error","code","removeItem","push","e"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,MAAMC,WAAW,GAAG,CAApB,C,CAEA;;AAEA,eAAeC,GAAf,CAAmBC,QAAnB,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2CC,UAA3C,EAAuD;AACrD,QAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYF,QAA7B;AACA,QAAMG,MAAM,GAAGV,MAAf;AACA,MAAIW,KAAJ;AAEA,MAAI,SAAiCC,MAAM,CAACC,YAA5C,EACEF,KAAK,GAAG,MAAME,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AAEF,QAAMC,UAAU,GAAI,GAAER,QAAS,GAAEJ,QAAS,EAA1C;AAEAa,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,QAAMG,aAAa,GAAG;AACpBd,IAAAA,MADoB;AAEpB;AACAe,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHW;AAMpB;AACAC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,IAAf;AAPc,GAAtB;;AAUA,MAAIM,KAAJ,EAAW;AACT;AACAO,IAAAA,aAAa,CAACC,OAAd,mCAA6BD,aAAa,CAACC,OAA3C;AAAoDI,MAAAA,aAAa,EAAEZ;AAAnE;AACD;;AAED,MAAI;AACF,UAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACV,UAAD,EAAaG,aAAb,CAA5B;AACA,UAAMQ,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;AAEA,QAAID,OAAO,CAACE,KAAZ,EAAmB;AACjBZ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBS,OAAO,CAACE,KAA/B;;AACA,UAAIF,OAAO,CAACE,KAAR,CAAcC,IAAd,KAAuB,eAA3B,EAA4C;AAC1C,cAAMhB,YAAY,CAACiB,UAAb,CAAwB,OAAxB,CAAN;AACApB,QAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACD;AACF;;AACD,WAAOL,OAAP;AACD,GAZD,CAYE,OAAOM,CAAP,EAAU;AACVhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,CAAZ;AACD;AACF;;AAED,eAAe9B,GAAf","sourcesContent":["import Router from \"next/router\";\nconst RETRY_COUNT = 5;\n\n// console.log(process.env.BASE_URL);\n\nasync function api(endpoint, method, data, optHeaders) {\n  const BASE_URL = process.env.BASE_URL;\n  const router = Router;\n  let token;\n\n  if (typeof window !== \"undefined\" && window.localStorage)\n    token = await localStorage.getItem(\"token\");\n\n  const requestUrl = `${BASE_URL}${endpoint}`;\n\n  console.log(requestUrl);\n  const requestConfig = {\n    method,\n    // mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    // credentials: \"include\",\n    body: JSON.stringify(data),\n  };\n\n  if (token) {\n    // console.log(\"token: \", token);\n    requestConfig.headers = { ...requestConfig.headers, Authorization: token };\n  }\n\n  try {\n    const response = await fetch(requestUrl, requestConfig);\n    const results = await response.json();\n\n    if (results.error) {\n      console.log(\"error: \", results.error);\n      if (results.error.code === \"invalid token\") {\n        await localStorage.removeItem(\"token\");\n        router.push(\"/login\");\n      }\n    }\n    return results;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}